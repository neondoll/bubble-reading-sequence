<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Facades\Storage;

/**
 * App\Models\ObjectFile
 *
 * @property int $id
 * @property int $obj_id
 * @property int $list_id
 * @property string $label
 * @property string $server_name
 * @property string $name
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile query()
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereLabel($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereListId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereObjId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereServerName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|ObjectFile whereUpdatedAt($value)
 * @mixin \Eloquent
 * @property-read \App\Models\FileList|null $listItem
 */
class ObjectFile extends Model
{
    use HasFactory;

    protected $fillable = [
        'obj_id',
        'list_id',
        'label',
        'server_name',
        'name',
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::deleting(function ($model) {
            $path = "public/object/{$model->obj_id}/files/{$model->server_name}";

            Storage::delete($path);
        });
    }


    public function listItem(): HasOne
    {
        return $this->hasOne(FileList::class, 'id', 'list_id');
    }
}
